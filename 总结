设计模式
    1、设计模式是人们在面对同类型软件工程设计问题所总结出的一些有用经验。模式不是代码，而是某类问题的通用设计解决方案。

    2、优点
        1 将实现予以解耦，让它和界面之间不再永久绑定    
        2 抽象和实现可以独立扩展，不会影响到对方       
        3 对于“具体的抽象类”所做的改变，不会影响到客户。
    3、缺点
        1 增加了复杂度
    4、七大原则
        1 单一职责原则：类的职责要单一，不能将太多的职责放在一个类中
        2 开闭原则：软件实体对扩展是开放的，但对修改是关闭的，即在不修改一个软件实体的基础上去扩展其功能
        3 里氏代换原则：在软件系统中，一个可以接受基类对象的地方必然可以接受一个子类对象
        4 依赖倒转原则：要针对抽象层编程，而不要针对具体类编程
        5 接口隔离原则：使用多个专门的接口来取代一个统一的接口
        6 合成复用原则：在系统中应该尽量多使用组合和聚合关联关系，尽量少使用甚至不使用继承关系
        7 迪米特法则：（最少知道原则）一个软件实体对其他实体的引用越少越好，或者说如果两个类不必彼此直接通信，那么这两个类就不应当发生直接的相互作用，而是通过引入一个第三者发生间接交互

单一原则
    1> 降低类的复杂度，一个类只负责一个职责
    2> 提高类的可读性，可维护性
    3> 降低变更引起的风险
    4> 通常情况下，我们应当遵守单一职责原则，只有逻辑足够简单，才可以在代码级别违反单一原则，只有类中方法足够少，可以在方法级别保持单一职责原则。

设计原则核心思想
    1> 找出应用中可能变化之处，把他们独立出来，不要和那些不需要变化的代码混合在一起
    2> 针对接口编程，而不是针对实现编程
    3> 为了交互对象之间的松耦合而努力

23种设计模式分为三种类型：
    1> 创建型模式： 单例模式(*)、工厂模式(*)、抽象工厂模式、原型模式、建造者模式
    2> 结构型模式：装饰模式(*)、代理模式(*)、适配器模式、桥接模式、组合模式、外观模式、享元模式
    3> 行为型模式：观察者模式(*)、模板方法模式、命令模式、访问者模式、迭代器模式、中介者模式、备忘录模式
        解释器模式、状态模式、策略模式、职责链模式

 类与类之间的六大关系
    1> 依赖：只要是在类中用到了对方，那么他们之间就存在依赖关系
        ①、在类中用到了对方
        ②、是类的成员属性
        ③、是方法的返回类型
        ④、是方法接收的参数类型
        ⑤、方法中使用到
    2> 泛化：泛化就是继承，是依赖关系的特例
        ①、如果一个类 A 继承了一个类 B ，那么 A 类和 B 类就存在泛化关系
    3> 实现：A 类实现 B 接口,是依赖关系的特例
        ①、如果一个类 A 实现了一个接口 B ，那么 A 类和 B 接口就存在泛化关系
    4> 关联：关联关系实际上就是类与类之间的联系，是依赖关系的特例
            关联具有导航性，即双向关联和双向关联
    5> 聚合：表示的是整体和部分的关系，整体和部分可以分开， 聚合关系是关联关系的特例，所以它具有关联的导向性和关联性
        如： 一台电脑由 显示器、键盘、鼠标组成：组成电脑的各个部件都可以从电脑上分离出来。
        public class Computer{
            private Monitor monitor;
        }
    6> 组合：表示的是整体和部分的关系，整体和部分不可以分开， 组合关系是聚合关系的特例，所以它具有关联的导向性和关联性
        public class Computer{
            private Monitor monitor = new Monitor();
        }