里氏替换原则：
    继承：
    1> 继承包含这样一层含义:父类中凡是已经实现好的方法，实际上是在设定规范和契约，虽然他不强制要求所有的子类必须遵循这些契约，
        但是子类对这些已经实现的方法任意修改，就会对真个体系造成破坏
    2> 继承在给程序设计带来便利的同时，也带来了弊端。比如继承会给程序带来侵入性，程序的可移植性降低，增强了对象之间的耦合性，如果一个
        类被其他的类所继承，则当这个类所需要修改时，必须考虑到所有的子类，并且父类修改后，所有涉及到子类的功能都有可能产生故障。
    3> 问题提出：在编程中，如何正确的使用继承？ ->  里氏替换原则

里氏替换原则：
    1> 如果对每个类型为 T1 的对象 O1 ，都有类型为 T2 的对象 O2， 使得以 T1 定义的所有程序 P 在所有的对象  O1 都代替成了 O2 时，程序 P 的
        行为没有发生变化,那么类型 T2 是类型 T1 的子类型。换句话说，所有引用基类的地方必须能透明的使用其子类的对象。
    2> 在使用继承时，遵循里氏替换原则，在子类中尽量不要重写父类的方法。
    3> 里氏替换原则告诉我们，继承实际上让两个类耦合性增强了，在适当的情况下，可以通过聚合、组合、依赖来解决问题。